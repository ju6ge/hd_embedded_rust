# [ doc = "Reader of register MCAN_BTP" ] pub type R = crate :: R < u32 , super :: MCAN_BTP > ; # [ doc = "Writer for register MCAN_BTP" ] pub type W = crate :: W < u32 , super :: MCAN_BTP > ; # [ doc = "Register MCAN_BTP `reset()`'s with value 0" ] impl crate :: ResetValue for super :: MCAN_BTP { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `SJW`" ] pub type SJW_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SJW`" ] pub struct SJW_W < 'a > { w : & 'a mut W , } impl < 'a > SJW_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x0f ) | ( ( value as u32 ) & 0x0f ) ; self . w } } # [ doc = "Reader of field `TSEG2`" ] pub type TSEG2_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `TSEG2`" ] pub struct TSEG2_W < 'a > { w : & 'a mut W , } impl < 'a > TSEG2_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 4 ) ) | ( ( ( value as u32 ) & 0x0f ) << 4 ) ; self . w } } # [ doc = "Reader of field `TSEG1`" ] pub type TSEG1_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `TSEG1`" ] pub struct TSEG1_W < 'a > { w : & 'a mut W , } impl < 'a > TSEG1_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x3f << 8 ) ) | ( ( ( value as u32 ) & 0x3f ) << 8 ) ; self . w } } # [ doc = "Reader of field `BRP`" ] pub type BRP_R = crate :: R < u16 , u16 > ; # [ doc = "Write proxy for field `BRP`" ] pub struct BRP_W < 'a > { w : & 'a mut W , } impl < 'a > BRP_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u16 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03ff << 16 ) ) | ( ( ( value as u32 ) & 0x03ff ) << 16 ) ; self . w } } impl R { # [ doc = "Bits 0:3 - (Re) Synchronization Jump Width" ] # [ inline ( always ) ] pub fn sjw ( & self ) -> SJW_R { SJW_R :: new ( ( self . bits & 0x0f ) as u8 ) } # [ doc = "Bits 4:7 - Time Segment After Sample Point" ] # [ inline ( always ) ] pub fn tseg2 ( & self ) -> TSEG2_R { TSEG2_R :: new ( ( ( self . bits >> 4 ) & 0x0f ) as u8 ) } # [ doc = "Bits 8:13 - Time Segment Before Sample Point" ] # [ inline ( always ) ] pub fn tseg1 ( & self ) -> TSEG1_R { TSEG1_R :: new ( ( ( self . bits >> 8 ) & 0x3f ) as u8 ) } # [ doc = "Bits 16:25 - Baud Rate Prescaler" ] # [ inline ( always ) ] pub fn brp ( & self ) -> BRP_R { BRP_R :: new ( ( ( self . bits >> 16 ) & 0x03ff ) as u16 ) } } impl W { # [ doc = "Bits 0:3 - (Re) Synchronization Jump Width" ] # [ inline ( always ) ] pub fn sjw ( & mut self ) -> SJW_W { SJW_W { w : self } } # [ doc = "Bits 4:7 - Time Segment After Sample Point" ] # [ inline ( always ) ] pub fn tseg2 ( & mut self ) -> TSEG2_W { TSEG2_W { w : self } } # [ doc = "Bits 8:13 - Time Segment Before Sample Point" ] # [ inline ( always ) ] pub fn tseg1 ( & mut self ) -> TSEG1_W { TSEG1_W { w : self } } # [ doc = "Bits 16:25 - Baud Rate Prescaler" ] # [ inline ( always ) ] pub fn brp ( & mut self ) -> BRP_W { BRP_W { w : self } } }