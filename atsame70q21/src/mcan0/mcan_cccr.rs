# [ doc = "Reader of register MCAN_CCCR" ] pub type R = crate :: R < u32 , super :: MCAN_CCCR > ; # [ doc = "Writer for register MCAN_CCCR" ] pub type W = crate :: W < u32 , super :: MCAN_CCCR > ; # [ doc = "Register MCAN_CCCR `reset()`'s with value 0" ] impl crate :: ResetValue for super :: MCAN_CCCR { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Initialization (read/write)\n\nValue on reset: 0" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum INIT_A { # [ doc = "0: Normal operation." ] DISABLED , # [ doc = "1: Initialization is started." ] ENABLED } impl From < INIT_A > for bool { # [ inline ( always ) ] fn from ( variant : INIT_A ) -> Self { match variant { INIT_A :: DISABLED => false , INIT_A :: ENABLED => true } } } # [ doc = "Reader of field `INIT`" ] pub type INIT_R = crate :: R < bool , INIT_A > ; impl INIT_R { # [ doc = r"Get enumerated values variant" ] # [ inline ( always ) ] pub fn variant ( & self ) -> INIT_A { match self . bits { false => INIT_A :: DISABLED , true => INIT_A :: ENABLED } } # [ doc = "Checks if the value of the field is `DISABLED`" ] # [ inline ( always ) ] pub fn is_disabled ( & self ) -> bool { * self == INIT_A :: DISABLED } # [ doc = "Checks if the value of the field is `ENABLED`" ] # [ inline ( always ) ] pub fn is_enabled ( & self ) -> bool { * self == INIT_A :: ENABLED } } # [ doc = "Write proxy for field `INIT`" ] pub struct INIT_W < 'a > { w : & 'a mut W , } impl < 'a > INIT_W < 'a > { # [ doc = r"Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : INIT_A ) -> & 'a mut W { { self . bit ( variant . into ( ) ) } } # [ doc = "Normal operation." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( INIT_A :: DISABLED ) } # [ doc = "Initialization is started." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( INIT_A :: ENABLED ) } # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } # [ doc = "Configuration Change Enable (read/write, write protection)\n\nValue on reset: 0" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum CCE_A { # [ doc = "0: The processor has no write access to the protected configuration registers." ] PROTECTED , # [ doc = "1: The processor has write access to the protected configuration registers (while MCAN_CCCR.INIT = '1')." ] CONFIGURABLE } impl From < CCE_A > for bool { # [ inline ( always ) ] fn from ( variant : CCE_A ) -> Self { match variant { CCE_A :: PROTECTED => false , CCE_A :: CONFIGURABLE => true } } } # [ doc = "Reader of field `CCE`" ] pub type CCE_R = crate :: R < bool , CCE_A > ; impl CCE_R { # [ doc = r"Get enumerated values variant" ] # [ inline ( always ) ] pub fn variant ( & self ) -> CCE_A { match self . bits { false => CCE_A :: PROTECTED , true => CCE_A :: CONFIGURABLE } } # [ doc = "Checks if the value of the field is `PROTECTED`" ] # [ inline ( always ) ] pub fn is_protected ( & self ) -> bool { * self == CCE_A :: PROTECTED } # [ doc = "Checks if the value of the field is `CONFIGURABLE`" ] # [ inline ( always ) ] pub fn is_configurable ( & self ) -> bool { * self == CCE_A :: CONFIGURABLE } } # [ doc = "Write proxy for field `CCE`" ] pub struct CCE_W < 'a > { w : & 'a mut W , } impl < 'a > CCE_W < 'a > { # [ doc = r"Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : CCE_A ) -> & 'a mut W { { self . bit ( variant . into ( ) ) } } # [ doc = "The processor has no write access to the protected configuration registers." ] # [ inline ( always ) ] pub fn protected ( self ) -> & 'a mut W { self . variant ( CCE_A :: PROTECTED ) } # [ doc = "The processor has write access to the protected configuration registers (while MCAN_CCCR.INIT = '1')." ] # [ inline ( always ) ] pub fn configurable ( self ) -> & 'a mut W { self . variant ( CCE_A :: CONFIGURABLE ) } # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 1 ) ) | ( ( ( value as u32 ) & 0x01 ) << 1 ) ; self . w } } # [ doc = "Restricted Operation Mode (read/write, write protection against '1')\n\nValue on reset: 0" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum ASM_A { # [ doc = "0: Normal CAN operation." ] NORMAL , # [ doc = "1: Restricted operation mode active." ] RESTRICTED } impl From < ASM_A > for bool { # [ inline ( always ) ] fn from ( variant : ASM_A ) -> Self { match variant { ASM_A :: NORMAL => false , ASM_A :: RESTRICTED => true } } } # [ doc = "Reader of field `ASM`" ] pub type ASM_R = crate :: R < bool , ASM_A > ; impl ASM_R { # [ doc = r"Get enumerated values variant" ] # [ inline ( always ) ] pub fn variant ( & self ) -> ASM_A { match self . bits { false => ASM_A :: NORMAL , true => ASM_A :: RESTRICTED } } # [ doc = "Checks if the value of the field is `NORMAL`" ] # [ inline ( always ) ] pub fn is_normal ( & self ) -> bool { * self == ASM_A :: NORMAL } # [ doc = "Checks if the value of the field is `RESTRICTED`" ] # [ inline ( always ) ] pub fn is_restricted ( & self ) -> bool { * self == ASM_A :: RESTRICTED } } # [ doc = "Write proxy for field `ASM`" ] pub struct ASM_W < 'a > { w : & 'a mut W , } impl < 'a > ASM_W < 'a > { # [ doc = r"Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : ASM_A ) -> & 'a mut W { { self . bit ( variant . into ( ) ) } } # [ doc = "Normal CAN operation." ] # [ inline ( always ) ] pub fn normal ( self ) -> & 'a mut W { self . variant ( ASM_A :: NORMAL ) } # [ doc = "Restricted operation mode active." ] # [ inline ( always ) ] pub fn restricted ( self ) -> & 'a mut W { self . variant ( ASM_A :: RESTRICTED ) } # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 2 ) ) | ( ( ( value as u32 ) & 0x01 ) << 2 ) ; self . w } } # [ doc = "Reader of field `CSA`" ] pub type CSA_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `CSA`" ] pub struct CSA_W < 'a > { w : & 'a mut W , } impl < 'a > CSA_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 3 ) ) | ( ( ( value as u32 ) & 0x01 ) << 3 ) ; self . w } } # [ doc = "Clock Stop Request (read/write)\n\nValue on reset: 0" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum CSR_A { # [ doc = "0: No clock stop is requested." ] NO_CLOCK_STOP , # [ doc = "1: Clock stop requested. When clock stop is requested, first INIT and then CSA will be set after all pend-ing transfer requests have been completed and the CAN bus reached idle." ] CLOCK_STOP } impl From < CSR_A > for bool { # [ inline ( always ) ] fn from ( variant : CSR_A ) -> Self { match variant { CSR_A :: NO_CLOCK_STOP => false , CSR_A :: CLOCK_STOP => true } } } # [ doc = "Reader of field `CSR`" ] pub type CSR_R = crate :: R < bool , CSR_A > ; impl CSR_R { # [ doc = r"Get enumerated values variant" ] # [ inline ( always ) ] pub fn variant ( & self ) -> CSR_A { match self . bits { false => CSR_A :: NO_CLOCK_STOP , true => CSR_A :: CLOCK_STOP } } # [ doc = "Checks if the value of the field is `NO_CLOCK_STOP`" ] # [ inline ( always ) ] pub fn is_no_clock_stop ( & self ) -> bool { * self == CSR_A :: NO_CLOCK_STOP } # [ doc = "Checks if the value of the field is `CLOCK_STOP`" ] # [ inline ( always ) ] pub fn is_clock_stop ( & self ) -> bool { * self == CSR_A :: CLOCK_STOP } } # [ doc = "Write proxy for field `CSR`" ] pub struct CSR_W < 'a > { w : & 'a mut W , } impl < 'a > CSR_W < 'a > { # [ doc = r"Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : CSR_A ) -> & 'a mut W { { self . bit ( variant . into ( ) ) } } # [ doc = "No clock stop is requested." ] # [ inline ( always ) ] pub fn no_clock_stop ( self ) -> & 'a mut W { self . variant ( CSR_A :: NO_CLOCK_STOP ) } # [ doc = "Clock stop requested. When clock stop is requested, first INIT and then CSA will be set after all pend-ing transfer requests have been completed and the CAN bus reached idle." ] # [ inline ( always ) ] pub fn clock_stop ( self ) -> & 'a mut W { self . variant ( CSR_A :: CLOCK_STOP ) } # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 4 ) ) | ( ( ( value as u32 ) & 0x01 ) << 4 ) ; self . w } } # [ doc = "Bus Monitoring Mode (read/write, write protection against '1')\n\nValue on reset: 0" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum MON_A { # [ doc = "0: Bus Monitoring mode is disabled." ] DISABLED , # [ doc = "1: Bus Monitoring mode is enabled." ] ENABLED } impl From < MON_A > for bool { # [ inline ( always ) ] fn from ( variant : MON_A ) -> Self { match variant { MON_A :: DISABLED => false , MON_A :: ENABLED => true } } } # [ doc = "Reader of field `MON`" ] pub type MON_R = crate :: R < bool , MON_A > ; impl MON_R { # [ doc = r"Get enumerated values variant" ] # [ inline ( always ) ] pub fn variant ( & self ) -> MON_A { match self . bits { false => MON_A :: DISABLED , true => MON_A :: ENABLED } } # [ doc = "Checks if the value of the field is `DISABLED`" ] # [ inline ( always ) ] pub fn is_disabled ( & self ) -> bool { * self == MON_A :: DISABLED } # [ doc = "Checks if the value of the field is `ENABLED`" ] # [ inline ( always ) ] pub fn is_enabled ( & self ) -> bool { * self == MON_A :: ENABLED } } # [ doc = "Write proxy for field `MON`" ] pub struct MON_W < 'a > { w : & 'a mut W , } impl < 'a > MON_W < 'a > { # [ doc = r"Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : MON_A ) -> & 'a mut W { { self . bit ( variant . into ( ) ) } } # [ doc = "Bus Monitoring mode is disabled." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( MON_A :: DISABLED ) } # [ doc = "Bus Monitoring mode is enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( MON_A :: ENABLED ) } # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 5 ) ) | ( ( ( value as u32 ) & 0x01 ) << 5 ) ; self . w } } # [ doc = "Disable Automatic Retransmission (read/write, write protection)\n\nValue on reset: 0" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum DAR_A { # [ doc = "0: Automatic retransmission of messages not transmitted successfully enabled." ] AUTO_RETX , # [ doc = "1: Automatic retransmission disabled." ] NO_AUTO_RETX } impl From < DAR_A > for bool { # [ inline ( always ) ] fn from ( variant : DAR_A ) -> Self { match variant { DAR_A :: AUTO_RETX => false , DAR_A :: NO_AUTO_RETX => true } } } # [ doc = "Reader of field `DAR`" ] pub type DAR_R = crate :: R < bool , DAR_A > ; impl DAR_R { # [ doc = r"Get enumerated values variant" ] # [ inline ( always ) ] pub fn variant ( & self ) -> DAR_A { match self . bits { false => DAR_A :: AUTO_RETX , true => DAR_A :: NO_AUTO_RETX } } # [ doc = "Checks if the value of the field is `AUTO_RETX`" ] # [ inline ( always ) ] pub fn is_auto_retx ( & self ) -> bool { * self == DAR_A :: AUTO_RETX } # [ doc = "Checks if the value of the field is `NO_AUTO_RETX`" ] # [ inline ( always ) ] pub fn is_no_auto_retx ( & self ) -> bool { * self == DAR_A :: NO_AUTO_RETX } } # [ doc = "Write proxy for field `DAR`" ] pub struct DAR_W < 'a > { w : & 'a mut W , } impl < 'a > DAR_W < 'a > { # [ doc = r"Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : DAR_A ) -> & 'a mut W { { self . bit ( variant . into ( ) ) } } # [ doc = "Automatic retransmission of messages not transmitted successfully enabled." ] # [ inline ( always ) ] pub fn auto_retx ( self ) -> & 'a mut W { self . variant ( DAR_A :: AUTO_RETX ) } # [ doc = "Automatic retransmission disabled." ] # [ inline ( always ) ] pub fn no_auto_retx ( self ) -> & 'a mut W { self . variant ( DAR_A :: NO_AUTO_RETX ) } # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 6 ) ) | ( ( ( value as u32 ) & 0x01 ) << 6 ) ; self . w } } # [ doc = "Test Mode Enable (read/write, write protection against '1')\n\nValue on reset: 0" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum TEST_A { # [ doc = "0: Normal operation, MCAN_TEST register holds reset values." ] DISABLED , # [ doc = "1: Test mode, write access to MCAN_TEST register enabled." ] ENABLED } impl From < TEST_A > for bool { # [ inline ( always ) ] fn from ( variant : TEST_A ) -> Self { match variant { TEST_A :: DISABLED => false , TEST_A :: ENABLED => true } } } # [ doc = "Reader of field `TEST`" ] pub type TEST_R = crate :: R < bool , TEST_A > ; impl TEST_R { # [ doc = r"Get enumerated values variant" ] # [ inline ( always ) ] pub fn variant ( & self ) -> TEST_A { match self . bits { false => TEST_A :: DISABLED , true => TEST_A :: ENABLED } } # [ doc = "Checks if the value of the field is `DISABLED`" ] # [ inline ( always ) ] pub fn is_disabled ( & self ) -> bool { * self == TEST_A :: DISABLED } # [ doc = "Checks if the value of the field is `ENABLED`" ] # [ inline ( always ) ] pub fn is_enabled ( & self ) -> bool { * self == TEST_A :: ENABLED } } # [ doc = "Write proxy for field `TEST`" ] pub struct TEST_W < 'a > { w : & 'a mut W , } impl < 'a > TEST_W < 'a > { # [ doc = r"Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : TEST_A ) -> & 'a mut W { { self . bit ( variant . into ( ) ) } } # [ doc = "Normal operation, MCAN_TEST register holds reset values." ] # [ inline ( always ) ] pub fn disabled ( self ) -> & 'a mut W { self . variant ( TEST_A :: DISABLED ) } # [ doc = "Test mode, write access to MCAN_TEST register enabled." ] # [ inline ( always ) ] pub fn enabled ( self ) -> & 'a mut W { self . variant ( TEST_A :: ENABLED ) } # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 7 ) ) | ( ( ( value as u32 ) & 0x01 ) << 7 ) ; self . w } } # [ doc = "CAN Mode Enable (read/write, write protection)\n\nValue on reset: 0" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum CME_A { # [ doc = "0: CAN operation according to ISO11898-1 enabled" ] ISO11898_1 , # [ doc = "1: CAN FD operation enabled" ] FD } impl From < CME_A > for u8 { # [ inline ( always ) ] fn from ( variant : CME_A ) -> Self { match variant { CME_A :: ISO11898_1 => 0 , CME_A :: FD => 1 } } } # [ doc = "Reader of field `CME`" ] pub type CME_R = crate :: R < u8 , CME_A > ; impl CME_R { # [ doc = r"Get enumerated values variant" ] # [ inline ( always ) ] pub fn variant ( & self ) -> crate :: Variant < u8 , CME_A > { use crate :: Variant :: * ; match self . bits { 0 => Val ( CME_A :: ISO11898_1 ) , 1 => Val ( CME_A :: FD ) , i => Res ( i ) } } # [ doc = "Checks if the value of the field is `ISO11898_1`" ] # [ inline ( always ) ] pub fn is_iso11898_1 ( & self ) -> bool { * self == CME_A :: ISO11898_1 } # [ doc = "Checks if the value of the field is `FD`" ] # [ inline ( always ) ] pub fn is_fd ( & self ) -> bool { * self == CME_A :: FD } } # [ doc = "Write proxy for field `CME`" ] pub struct CME_W < 'a > { w : & 'a mut W , } impl < 'a > CME_W < 'a > { # [ doc = r"Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : CME_A ) -> & 'a mut W { unsafe { self . bits ( variant . into ( ) ) } } # [ doc = "CAN operation according to ISO11898-1 enabled" ] # [ inline ( always ) ] pub fn iso11898_1 ( self ) -> & 'a mut W { self . variant ( CME_A :: ISO11898_1 ) } # [ doc = "CAN FD operation enabled" ] # [ inline ( always ) ] pub fn fd ( self ) -> & 'a mut W { self . variant ( CME_A :: FD ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03 << 8 ) ) | ( ( ( value as u32 ) & 0x03 ) << 8 ) ; self . w } } # [ doc = "CAN Mode Request (read/write)\n\nValue on reset: 0" ] # [ derive ( Clone , Copy , Debug , PartialEq ) ] pub enum CMR_A { # [ doc = "0: No mode change" ] NO_CHANGE , # [ doc = "1: Request CAN FD operation" ] FD , # [ doc = "2: Request CAN FD operation with bit rate switching" ] FD_BITRATE_SWITCH , # [ doc = "3: Request CAN operation according ISO11898-1" ] ISO11898_1 } impl From < CMR_A > for u8 { # [ inline ( always ) ] fn from ( variant : CMR_A ) -> Self { match variant { CMR_A :: NO_CHANGE => 0 , CMR_A :: FD => 1 , CMR_A :: FD_BITRATE_SWITCH => 2 , CMR_A :: ISO11898_1 => 3 } } } # [ doc = "Reader of field `CMR`" ] pub type CMR_R = crate :: R < u8 , CMR_A > ; impl CMR_R { # [ doc = r"Get enumerated values variant" ] # [ inline ( always ) ] pub fn variant ( & self ) -> CMR_A { match self . bits { 0 => CMR_A :: NO_CHANGE , 1 => CMR_A :: FD , 2 => CMR_A :: FD_BITRATE_SWITCH , 3 => CMR_A :: ISO11898_1 , _ => unreachable ! ( ) } } # [ doc = "Checks if the value of the field is `NO_CHANGE`" ] # [ inline ( always ) ] pub fn is_no_change ( & self ) -> bool { * self == CMR_A :: NO_CHANGE } # [ doc = "Checks if the value of the field is `FD`" ] # [ inline ( always ) ] pub fn is_fd ( & self ) -> bool { * self == CMR_A :: FD } # [ doc = "Checks if the value of the field is `FD_BITRATE_SWITCH`" ] # [ inline ( always ) ] pub fn is_fd_bitrate_switch ( & self ) -> bool { * self == CMR_A :: FD_BITRATE_SWITCH } # [ doc = "Checks if the value of the field is `ISO11898_1`" ] # [ inline ( always ) ] pub fn is_iso11898_1 ( & self ) -> bool { * self == CMR_A :: ISO11898_1 } } # [ doc = "Write proxy for field `CMR`" ] pub struct CMR_W < 'a > { w : & 'a mut W , } impl < 'a > CMR_W < 'a > { # [ doc = r"Writes `variant` to the field" ] # [ inline ( always ) ] pub fn variant ( self , variant : CMR_A ) -> & 'a mut W { { self . bits ( variant . into ( ) ) } } # [ doc = "No mode change" ] # [ inline ( always ) ] pub fn no_change ( self ) -> & 'a mut W { self . variant ( CMR_A :: NO_CHANGE ) } # [ doc = "Request CAN FD operation" ] # [ inline ( always ) ] pub fn fd ( self ) -> & 'a mut W { self . variant ( CMR_A :: FD ) } # [ doc = "Request CAN FD operation with bit rate switching" ] # [ inline ( always ) ] pub fn fd_bitrate_switch ( self ) -> & 'a mut W { self . variant ( CMR_A :: FD_BITRATE_SWITCH ) } # [ doc = "Request CAN operation according ISO11898-1" ] # [ inline ( always ) ] pub fn iso11898_1 ( self ) -> & 'a mut W { self . variant ( CMR_A :: ISO11898_1 ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03 << 10 ) ) | ( ( ( value as u32 ) & 0x03 ) << 10 ) ; self . w } } # [ doc = "Reader of field `FDO`" ] pub type FDO_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `FDO`" ] pub struct FDO_W < 'a > { w : & 'a mut W , } impl < 'a > FDO_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 12 ) ) | ( ( ( value as u32 ) & 0x01 ) << 12 ) ; self . w } } # [ doc = "Reader of field `FDBS`" ] pub type FDBS_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `FDBS`" ] pub struct FDBS_W < 'a > { w : & 'a mut W , } impl < 'a > FDBS_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 13 ) ) | ( ( ( value as u32 ) & 0x01 ) << 13 ) ; self . w } } # [ doc = "Reader of field `TXP`" ] pub type TXP_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `TXP`" ] pub struct TXP_W < 'a > { w : & 'a mut W , } impl < 'a > TXP_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 14 ) ) | ( ( ( value as u32 ) & 0x01 ) << 14 ) ; self . w } } impl R { # [ doc = "Bit 0 - Initialization (read/write)" ] # [ inline ( always ) ] pub fn init ( & self ) -> INIT_R { INIT_R :: new ( ( self . bits & 0x01 ) != 0 ) } # [ doc = "Bit 1 - Configuration Change Enable (read/write, write protection)" ] # [ inline ( always ) ] pub fn cce ( & self ) -> CCE_R { CCE_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bit 2 - Restricted Operation Mode (read/write, write protection against '1')" ] # [ inline ( always ) ] pub fn asm ( & self ) -> ASM_R { ASM_R :: new ( ( ( self . bits >> 2 ) & 0x01 ) != 0 ) } # [ doc = "Bit 3 - Clock Stop Acknowledge (read-only)" ] # [ inline ( always ) ] pub fn csa ( & self ) -> CSA_R { CSA_R :: new ( ( ( self . bits >> 3 ) & 0x01 ) != 0 ) } # [ doc = "Bit 4 - Clock Stop Request (read/write)" ] # [ inline ( always ) ] pub fn csr ( & self ) -> CSR_R { CSR_R :: new ( ( ( self . bits >> 4 ) & 0x01 ) != 0 ) } # [ doc = "Bit 5 - Bus Monitoring Mode (read/write, write protection against '1')" ] # [ inline ( always ) ] pub fn mon ( & self ) -> MON_R { MON_R :: new ( ( ( self . bits >> 5 ) & 0x01 ) != 0 ) } # [ doc = "Bit 6 - Disable Automatic Retransmission (read/write, write protection)" ] # [ inline ( always ) ] pub fn dar ( & self ) -> DAR_R { DAR_R :: new ( ( ( self . bits >> 6 ) & 0x01 ) != 0 ) } # [ doc = "Bit 7 - Test Mode Enable (read/write, write protection against '1')" ] # [ inline ( always ) ] pub fn test ( & self ) -> TEST_R { TEST_R :: new ( ( ( self . bits >> 7 ) & 0x01 ) != 0 ) } # [ doc = "Bits 8:9 - CAN Mode Enable (read/write, write protection)" ] # [ inline ( always ) ] pub fn cme ( & self ) -> CME_R { CME_R :: new ( ( ( self . bits >> 8 ) & 0x03 ) as u8 ) } # [ doc = "Bits 10:11 - CAN Mode Request (read/write)" ] # [ inline ( always ) ] pub fn cmr ( & self ) -> CMR_R { CMR_R :: new ( ( ( self . bits >> 10 ) & 0x03 ) as u8 ) } # [ doc = "Bit 12 - CAN FD Operation (read-only)" ] # [ inline ( always ) ] pub fn fdo ( & self ) -> FDO_R { FDO_R :: new ( ( ( self . bits >> 12 ) & 0x01 ) != 0 ) } # [ doc = "Bit 13 - CAN FD Bit Rate Switching (read-only)" ] # [ inline ( always ) ] pub fn fdbs ( & self ) -> FDBS_R { FDBS_R :: new ( ( ( self . bits >> 13 ) & 0x01 ) != 0 ) } # [ doc = "Bit 14 - Transmit Pause (read/write, write protection)" ] # [ inline ( always ) ] pub fn txp ( & self ) -> TXP_R { TXP_R :: new ( ( ( self . bits >> 14 ) & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 0 - Initialization (read/write)" ] # [ inline ( always ) ] pub fn init ( & mut self ) -> INIT_W { INIT_W { w : self } } # [ doc = "Bit 1 - Configuration Change Enable (read/write, write protection)" ] # [ inline ( always ) ] pub fn cce ( & mut self ) -> CCE_W { CCE_W { w : self } } # [ doc = "Bit 2 - Restricted Operation Mode (read/write, write protection against '1')" ] # [ inline ( always ) ] pub fn asm ( & mut self ) -> ASM_W { ASM_W { w : self } } # [ doc = "Bit 3 - Clock Stop Acknowledge (read-only)" ] # [ inline ( always ) ] pub fn csa ( & mut self ) -> CSA_W { CSA_W { w : self } } # [ doc = "Bit 4 - Clock Stop Request (read/write)" ] # [ inline ( always ) ] pub fn csr ( & mut self ) -> CSR_W { CSR_W { w : self } } # [ doc = "Bit 5 - Bus Monitoring Mode (read/write, write protection against '1')" ] # [ inline ( always ) ] pub fn mon ( & mut self ) -> MON_W { MON_W { w : self } } # [ doc = "Bit 6 - Disable Automatic Retransmission (read/write, write protection)" ] # [ inline ( always ) ] pub fn dar ( & mut self ) -> DAR_W { DAR_W { w : self } } # [ doc = "Bit 7 - Test Mode Enable (read/write, write protection against '1')" ] # [ inline ( always ) ] pub fn test ( & mut self ) -> TEST_W { TEST_W { w : self } } # [ doc = "Bits 8:9 - CAN Mode Enable (read/write, write protection)" ] # [ inline ( always ) ] pub fn cme ( & mut self ) -> CME_W { CME_W { w : self } } # [ doc = "Bits 10:11 - CAN Mode Request (read/write)" ] # [ inline ( always ) ] pub fn cmr ( & mut self ) -> CMR_W { CMR_W { w : self } } # [ doc = "Bit 12 - CAN FD Operation (read-only)" ] # [ inline ( always ) ] pub fn fdo ( & mut self ) -> FDO_W { FDO_W { w : self } } # [ doc = "Bit 13 - CAN FD Bit Rate Switching (read-only)" ] # [ inline ( always ) ] pub fn fdbs ( & mut self ) -> FDBS_W { FDBS_W { w : self } } # [ doc = "Bit 14 - Transmit Pause (read/write, write protection)" ] # [ inline ( always ) ] pub fn txp ( & mut self ) -> TXP_W { TXP_W { w : self } } }